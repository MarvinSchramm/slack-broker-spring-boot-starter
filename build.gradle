buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.40")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7")
    }
}
apply plugin: "org.sonarqube"
sonarqube {
    properties {
        property "sonar.projectName", "Slack Broker"
        property "sonar.projectKey", "io.olaph.slack"
        property "sonar.host.url", "https://sonarcloud.io/"
        property "sonar.organization", "olaph-io"
    }
}

allprojects {

    group = "io.olaph.slack"
    version = "0.0.1.BUILD-SNAPSHOT"

    project.ext {
        junitJupiterVersion = "5.3.1"
        junitPlatformVersion = "1.3.1"
        springBootVersion = "2.1.0.RELEASE"
        projectVersion = version
        kotlinVersion = "1.2.40"
    }

    task wrapper(type: Wrapper) {
        gradleVersion "4.10.2"
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }

}
subprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "kotlin"
    apply plugin: "jacoco"
    apply plugin: "maven-publish"


    publishing {
        repositories {
            maven {
                url "s3://libs.olaph.io"
                credentials(AwsCredentials) {
                    accessKey ""
                    secretKey ""
                }
            }

        }
    }

    /**
    * Replace illegal characters from the module key
    */
    sonarqube {
        String regex = "(.*)/(.*)"
        String projectKey = project.name.replaceAll(regex, "\$1:\$2")
        String sonarModuleKey = rootProject.group + ":" + rootProject.name + ":" + projectKey

        properties {
            property "sonar.moduleKey", sonarModuleKey
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier "sources"
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    jacoco {
        toolVersion = "0.8.3"
    }

    tasks.withType(Test) {
        systemProperties = System.properties
        systemProperties['user.dir'] = workingDir
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-params", version: "${junitJupiterVersion}")
        testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api", version: "${junitJupiterVersion}")
        testRuntime(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "${junitJupiterVersion}")
        testImplementation(group: "org.junit.platform", name: "junit-platform-runner", version: "${junitPlatformVersion}") {
            exclude(group: "junit", module: "junit")
        }
    }

}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

wrapper {
    gradleVersion = "4.10.2"
}
